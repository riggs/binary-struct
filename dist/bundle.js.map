{"version":3,"sources":["webpack:///webpack/bootstrap 8373836bb8d646ebba6c","webpack:///./src/serialization.ts","webpack:///./src/transcode.ts","webpack:///./src/index.ts"],"names":[],"mappings":"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","file":"dist/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 8373836bb8d646ebba6c","export function hex(value: number) {\n    return \"0x\" + value.toString(16).toUpperCase().padStart(2, \"0\")\n}\n\nexport function hex_buffer(buffer: ArrayBuffer) {\n    return Array.from(new Uint8Array(buffer), hex).join(\", \")\n}\n\nconst utf8_encoder = new TextEncoder();\nconst utf8_decoder = new TextDecoder();\n\nexport const Bits_Sizes = [1, 2, 3, 4, 5, 6, 7];\n\nexport const Uint_Sizes = Bits_Sizes.concat([8, 16, 32, 64]);\n\nexport const Int_Sizes = [8, 16, 32];\n\nexport const Float_Sizes = [32, 64];\n\nexport type Size = number;\n\nexport interface Serialization_Options {\n    bits: Size;\n    byte_offset?: number;\n    data_view: DataView;\n    little_endian?: boolean;\n}\n\nexport interface Serializer<T> {\n    (value: T, options: Serialization_Options): Size;\n}\n\nexport interface Deserializer<T> {\n    (options: Serialization_Options): T;\n}\n\nconst write_bit_shift: (<T>(packer: Serializer<T>, value: T, options: Serialization_Options) => Size) =\n    (packer, value, { bits, data_view, byte_offset = 0, little_endian }) => {\n        /*\n         bit_offset = 5\n         buffer = 00011111\n         byte = xxxxxxxx\n\n         new_buffer = 000xxxxx xxx11111\n         */\n        const bit_offset = ( byte_offset % 1 ) * 8;\n        byte_offset = Math.floor(byte_offset);\n        const bytes = new Uint8Array(Math.ceil(bits / 8));\n        const bit_length = packer(value, { bits, byte_offset: 0, data_view: new DataView(bytes.buffer), little_endian });\n        let overlap = data_view.getUint8(byte_offset) & ( 0xFF >> ( 8 - bit_offset ));\n        for ( const [index, byte] of bytes.entries() ) {\n            data_view.setUint8(byte_offset + index, (( byte << bit_offset ) & 0xFF ) | overlap);\n            overlap = byte >> ( 8 - bit_offset );\n        }\n        if ( bit_offset + bits > 8 ) {\n            data_view.setUint8(byte_offset + Math.ceil(bits / 8), overlap);\n        }\n        return bit_length;\n    };\n\nconst read_bit_shift: (<T>(parser: Deserializer<T>, options: Serialization_Options) => T) =\n    (parser, { bits, data_view, byte_offset = 0, little_endian }) => {\n        const bit_offset = ( byte_offset % 1 ) * 8;\n        byte_offset = Math.floor(byte_offset);\n        const bytes = new Uint8Array(Math.ceil(bits / 8));\n        let byte = data_view.getUint8(byte_offset);\n        if ( bit_offset + bits > 8 ) {\n            for ( const index of bytes.keys() ) {\n                const next = data_view.getUint8(byte_offset + index + 1);\n                bytes[index] = ( byte >> bit_offset ) | (( next << ( 8 - bit_offset )) & ( 0xFF >> ( bits < 8 ? ( 8 - bits ) : 0 )));\n                byte = next;\n            }\n        } else {\n            bytes[0] = byte >> bit_offset & ( 0xFF >> ( 8 - bits ));\n        }\n        return parser({ bits, byte_offset: 0, data_view: new DataView(bytes.buffer), little_endian });\n    };\n\nexport const uint_pack: Serializer<number> = (value, { bits, data_view, byte_offset = 0, little_endian }) => {\n    const original_value = value;\n    value = Math.floor(original_value);\n    if ( value < 0 || value > 2 ** bits || original_value !== value || value > Number.MAX_SAFE_INTEGER ) {\n        throw new Error(`Unable to encode ${original_value} to Uint${bits}`)\n    }\n    if ( byte_offset % 1 ) {\n        return write_bit_shift(uint_pack, value, { bits, data_view, byte_offset, little_endian });\n    } else {\n        switch ( bits ) {\n            case 1:\n            case 2:\n            case 3:\n            case 4:\n            case 5:\n            case 6:\n            case 7:\n            case 8:\n                data_view.setUint8(byte_offset, value);\n                break;\n            case 16:\n                data_view.setUint16(byte_offset, value, little_endian);\n                break;\n            case 32:\n                data_view.setUint32(byte_offset, value, little_endian);\n                break;\n            case 64:    /* Special case to handle millisecond epoc time (from Date.now()) */\n                const upper = Math.floor(value / 2 ** 32);\n                const lower = value % 2 ** 32;\n                let low_byte: number;\n                let high_byte: number;\n                if ( little_endian ) {\n                    low_byte = lower; high_byte = upper;\n                } else {\n                    low_byte = upper; high_byte = lower;\n                }\n                data_view.setUint32(byte_offset, low_byte, little_endian);\n                data_view.setUint32(byte_offset + 4, high_byte, little_endian);\n                break;\n            default:\n                throw new Error(`Invalid size: ${bits}`);\n        }\n        return bits;\n    }\n};\n\nexport const uint_parse: Deserializer<number> = ({ bits, data_view, byte_offset = 0, little_endian }) => {\n    if ( byte_offset % 1 ) {\n        return read_bit_shift(uint_parse, { bits, data_view, byte_offset, little_endian });\n    } else {\n        switch ( bits ) {\n            case 1:\n            case 2:\n            case 3:\n            case 4:\n            case 5:\n            case 6:\n            case 7:\n                return data_view.getUint8(byte_offset) & ( 0xFF >> ( 8 - bits ));\n            case 8:\n                return data_view.getUint8(byte_offset);\n            case 16:\n                return data_view.getUint16(byte_offset, little_endian);\n            case 32:\n                return data_view.getUint32(byte_offset, little_endian);\n            case 64:    /* Special case to handle millisecond epoc time (from Date.now()) */\n                const low_byte = data_view.getUint32(byte_offset, little_endian);\n                const high_byte = data_view.getUint32(byte_offset + 4, little_endian);\n                let value: number;\n                if ( little_endian ) {\n                    value = high_byte * 2 ** 32 + low_byte;\n                } else {\n                    value = low_byte * 2 ** 32 + high_byte;\n                }\n                if ( value > Number.MAX_SAFE_INTEGER ) {\n                    throw new Error(`Uint64 out of range for Javascript: ${hex_buffer(data_view.buffer.slice(byte_offset, byte_offset + 8))}`)\n                }\n                return value;\n            default:\n                throw new Error(`Invalid size: ${bits}`);\n        }\n    }\n};\n\nexport const int_pack: Serializer<number> = (value, { bits, data_view, byte_offset = 0, little_endian }) => {\n    const original_value = value;\n    value = Math.floor(original_value);\n    if ( value < -( 2 ** ( bits - 1 )) || value > 2 ** ( bits - 1 ) - 1 || original_value !== value ) {\n        throw new Error(`Unable to encode ${original_value} to Int${bits}`)\n    }\n    if ( byte_offset % 1 ) {\n        return write_bit_shift(int_pack, value, { bits, data_view, byte_offset, little_endian });\n    } else {\n        switch ( bits ) {\n            case 8:\n                data_view.setUint8(byte_offset, value);\n                break;\n            case 16:\n                data_view.setUint16(byte_offset, value, little_endian);\n                break;\n            case 32:\n                data_view.setUint32(byte_offset, value, little_endian);\n                break;\n            default:\n                throw new Error(`Invalid size: ${bits}`);\n        }\n        return bits;\n    }\n};\n\nexport const int_parse: Deserializer<number> = ({ bits, data_view, byte_offset = 0, little_endian }) => {\n    if ( byte_offset % 1 ) {\n        return read_bit_shift(int_parse, { bits, data_view, byte_offset, little_endian });\n    } else {\n        switch ( bits ) {\n            case 8:\n                return data_view.getInt8(byte_offset);\n            case 16:\n                return data_view.getInt16(byte_offset, little_endian);\n            case 32:\n                return data_view.getInt32(byte_offset, little_endian);\n            default:\n                throw new Error(`Invalid size: ${bits}`);\n        }\n    }\n};\n\nexport const float_pack: Serializer<number> = (value, { bits, data_view, byte_offset = 0, little_endian }) => {\n    /* TODO: Input validation */\n    if ( byte_offset % 1 ) {\n        return write_bit_shift(float_pack, value, { bits, data_view, byte_offset, little_endian });\n    } else {\n        switch ( bits ) {\n            case 32:\n                data_view.setFloat32(byte_offset, value, little_endian);\n                break;\n            case 64:\n                data_view.setFloat64(byte_offset, value, little_endian);\n                break;\n            default:\n                throw new Error(`Invalid size: ${bits}`);\n        }\n        return bits;\n    }\n};\n\nexport const float_parse: Deserializer<number> = ({ bits, data_view, byte_offset = 0, little_endian }) => {\n    if ( byte_offset % 1 ) {\n        return read_bit_shift(float_parse, { bits, data_view, byte_offset, little_endian });\n    } else {\n        switch ( bits ) {\n            case 32:\n                return data_view.getFloat32(byte_offset, little_endian);\n            case 64:\n                return data_view.getFloat64(byte_offset, little_endian);\n            default:\n                throw new Error(`Invalid size: ${bits}`);\n        }\n    }\n};\n\nexport const utf8_pack: Serializer<string> = (value, { bits, data_view, byte_offset = 0 }) => {\n    if ( byte_offset % 1 ) {\n        return write_bit_shift(utf8_pack, value, { bits, data_view, byte_offset });\n    } else {\n        const byte_array = utf8_encoder.encode(value);\n        const byte_length = byte_array.byteLength;\n        if ( bits > 0 && byte_length > bits / 8 ) {\n            throw new Error(`Input string serializes to longer than ${bits / 8} bytes:\\n${value}`);\n        }\n        if ( byte_length + byte_offset > data_view.byteLength ) {\n            throw new Error(`Insufficient space in ArrayBuffer to store length ${byte_length} string:\\n${value}`);\n        }\n        for ( const [index, byte] of byte_array.entries() ) {\n            data_view.setUint8(byte_offset + index, byte);\n        }\n        return byte_length * 8;\n    }\n};\n\nexport const utf8_parse: Deserializer<string> = ({ bits, data_view, byte_offset = 0 }) => {\n    if ( byte_offset % 1 ) {\n        return read_bit_shift(utf8_parse, { bits, data_view, byte_offset });\n    } else {\n        return utf8_decoder.decode(new DataView(data_view.buffer, byte_offset, bits ? bits / 8 : undefined));\n    }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/serialization.ts","import {\n    Bits_Sizes,\n    Uint_Sizes,\n    Int_Sizes,\n    Float_Sizes,\n    Size,\n    Serializer,\n    Deserializer,\n    uint_pack,\n    int_pack,\n    float_pack,\n    uint_parse,\n    int_parse,\n    float_parse,\n    utf8_pack,\n    utf8_parse,\n    hex_buffer\n} from './serialization';\n\nexport type Primitive = number | string | ArrayBuffer;\n\nexport type Mapped<T> = Map<string, T>;\n\nexport type Encoded_Map = Mapped<any>;\nexport type Encoded_Array = Array<any>;\nexport type Encoded = Primitive | Encoded_Map | Encoded_Array;\n\n/* Someday, when Typescript can properly handle Symbol indices on objects, I'll return to this. */\n// export const Parent = Symbol(\"Parent\");\n\nexport interface Context<P> {\n    // [Parent]?: P;\n    $parent?: P;\n}\n\nexport type Parent = '$parent'\nexport const Parent: Parent = '$parent';\n\nconst set_context = <E extends Encoded_Map | Encoded_Array, C>(data: E, context?: C): Context_Type<E, C> => {\n    if ( context !== undefined ) {\n        ( data as Context_Type<E, C> )[Parent] = context;\n    }\n    return data as Context_Type<E, C>;\n};\n\nconst remove_context = <T extends Encoded_Map | Encoded_Array, C>(data: T, delete_flag: boolean): T => {\n    if ( delete_flag ) {\n        delete ( data as Context_Type<T, C> )[Parent];\n    }\n    return data;\n};\n\n/* Context needs to be imposed at the Struct level to support Repeat & Byte_Buffer */\nexport type Context_Type<E extends Encoded, C> = E & Context<C>;\n\nexport type Context_Map<Encoded, Context> = Context_Type<Mapped<Encoded>, Context>;\n\nexport type Context_Array<Encoded, Context> = Context_Type<Array<Encoded>, Context>;\n\nexport type Context_Iterable<Encoded, Context> = Context_Map<Encoded, Context> | Context_Array<Encoded, Context>;\n\n/* These functions provided by library consumer to convert data to usable structures. */\nexport type Encoder<Decoded, E extends Encoded, Context> = (decoded: Decoded, context?: Context) => E;\nexport type Decoder<E extends Encoded, Decoded, Context> = (encoded: E, context?: Context) => Decoded;\n\nexport interface Transcoders<E extends Encoded, Decoded, Context> {\n    encode?: Encoder<Decoded, E, Context>;\n    decode?: Decoder<E, Decoded, Context>;\n    little_endian?: boolean;\n}\n\nexport const inspect_transcoder = <T>(data: T, context?: any): T => {\n    console.log({ data, context });\n    return data\n};\n\nexport const inspect = {\n    encode: inspect_transcoder,\n    decode: inspect_transcoder,\n};\n\n/** A function to fetch the data to be packed.\n *  It is provided by the code handling the input data and called by the packer function to fetch the data to pack.\n */\nexport interface Fetcher<Decoded> {\n    (): Decoded;\n}\n\n/** A function to deliver the parsed result to the correct place.\n *  It is provided by the code managing the results container and called by the parser function with the parsed data.\n */\nexport interface Deliver<Decoded> {\n    (data: Decoded): void;\n}\n\nexport interface Parse_Options<Context> {\n    byte_offset?: number;\n    little_endian?: boolean;\n    context?: Context;\n}\n\nexport interface Pack_Options<C> extends Parse_Options<C> {\n    data_view?: DataView;\n}\n\nexport interface Packed {\n    buffer: ArrayBuffer;\n    size: Size; /* In Bytes */\n}\n\nexport interface Parsed<Decoded> {\n    data: Decoded;\n    size: Size; /* In Bytes */\n}\n\nexport interface Packer<Decoded, Context> {\n    (source: Decoded | Fetcher<Decoded>, options?: Pack_Options<Context>): Packed;\n}\n\nexport interface Parser<Decoded, Context> {\n    (data_view: DataView, options?: Parse_Options<Context>, deliver?: Deliver<Decoded>): Parsed<Decoded>;\n}\n\n/* Explicitly imposing that, for custom Transcoders, output format from deserialization must match input format to serialization. */\nexport interface Struct<Decoded, Context> {\n    pack: Packer<Decoded, Context>;\n    parse: Parser<Decoded, Context>;\n}\n\n/* Called by pack */\ninterface fetch_and_encode<D, E extends Encoded, C> {\n    source: Fetcher<D | E> | D | E;\n    encode?: Encoder<D, E, C>;\n    context?: C;\n}\nconst fetch_and_encode = <D, E extends Encoded, C>({ source, encode, context }: fetch_and_encode<D, E, C>): E => {\n    let decoded;\n    if ( typeof source === 'function' ) {\n        decoded = source();\n    } else {\n        decoded = source as D | E;\n    }\n    if ( typeof encode === 'function' ) {\n        return encode(decoded as D, context);\n    } else {\n        return decoded as E;\n    }\n};\n\n/* Called by parse */\ninterface decode_and_deliver<E extends Encoded, D, C> {\n    encoded: E | D;\n    decode?: Decoder<E, D, C>;\n    context?: C;\n    deliver?: Deliver<D>;\n}\nconst decode_and_deliver = <E extends Encoded, D, C>({ encoded, decode, context, deliver }: decode_and_deliver<E, D, C>): D => {\n    let decoded;\n    if ( typeof decode === 'function' ) {\n        decoded = decode(encoded as E, context);\n    } else {\n        decoded = encoded as D;\n    }\n    if ( typeof deliver === 'function' ) {\n        deliver(decoded);\n    }\n    return decoded;\n};\n\nconst factory = <E extends number | string>(serializer: Serializer<E>, deserializer: Deserializer<E>, verify_size: (bits: number) => boolean) => {\n    return ( <D, C>(bits: number, transcoders: Transcoders<E, D, C> = {}): Struct<D, C> => {\n        if ( !verify_size(bits) ) {\n            throw new Error(`Invalid size: ${bits}`);\n        }\n        const { encode, decode, little_endian: LE } = transcoders;\n\n        const pack: Packer<D, C> = (source, options = {}) => {\n            const { data_view = new DataView(new ArrayBuffer(Math.ceil(bits / 8))), byte_offset = 0, little_endian = LE, context } = options;\n            const encoded = fetch_and_encode({ source, encode, context }) as E;\n            const size = ( serializer(encoded, { bits, data_view, byte_offset, little_endian }) / 8 );\n            return { size, buffer: data_view.buffer };\n        };\n\n        const parse: Parser<D, C> = (data_view, options = {}, deliver) => {\n            const { byte_offset = 0, little_endian = LE, context } = options;\n            const encoded = deserializer({ bits, data_view, byte_offset, little_endian });\n            const data = decode_and_deliver({ encoded, context, decode, deliver }) as D;\n            return { data, size: bits / 8 };\n        };\n        return { pack, parse };\n    } );\n};\n\nexport const Bits = factory(uint_pack, uint_parse, (s) => Bits_Sizes.includes(s));\n\nexport const Uint = factory(uint_pack, uint_parse, (s) => Uint_Sizes.includes(s));\n\nexport const Int = factory(int_pack, int_parse, (s) => Int_Sizes.includes(s));\n\nexport const Float = factory(float_pack, float_parse, (s) => Float_Sizes.includes(s));\n\nexport const Utf8 = factory(utf8_pack, utf8_parse, (s) => s % 8 === 0 && s >= 0);\n\nexport type Numeric<C> = number | { bits?: number, bytes?: number } | ((context?: C) => number);\n\nconst numeric = <C>(n: Numeric<C>, context?: C): number => {\n    if ( typeof n === 'object' ) {\n        let { bits = 0, bytes = 0 } = n;\n        n = bits / 8 + bytes;\n    } else if ( typeof n === 'function' ) {\n        n = n(context);\n    } else if ( typeof n !== 'number' ) {\n        throw new Error(`Invalid numeric input ${n}`);\n    }\n    if ( n < 0 ) {\n        throw new Error(`Invalid size: ${n} bytes`);\n    }\n    return n;\n};\n\n/** Byte_Buffer doesn't do any serialization, but just copies bytes to/from an ArrayBuffer that's a subset of the\n * serialized buffer. Byte_Buffer only works on byte-aligned data.\n *\n * @param {Numeric} length\n * @param {Transcoders<ArrayBuffer, any>} transcoders\n */\nexport const Byte_Buffer = <D, C>(length: Numeric<C>, transcoders: Transcoders<ArrayBuffer, D, C> = {}) => {\n    const { encode, decode } = transcoders;\n    const pack = (source: D | Fetcher<D>, options: Pack_Options<C> = {}): Packed => {\n        const { data_view, byte_offset = 0, context } = options;\n        const size = numeric(length, context);\n        const buffer = fetch_and_encode({ source, encode, context });\n        if ( size !== buffer.byteLength ) {\n            throw new Error(`Length miss-match. Expected length: ${size}, actual bytelength: ${buffer.byteLength}`)\n        }\n        if ( data_view === undefined ) {\n            return { size, buffer }\n        }\n        new Uint8Array(buffer).forEach((value, index) => {\n            data_view.setUint8(byte_offset + index, value);\n        });\n        return { size, buffer: data_view.buffer }\n    };\n    const parse = (data_view: DataView, options: Parse_Options<C> = {}, deliver?: Deliver<D>) => {\n        const { byte_offset = 0, context } = options;\n        const size = numeric(length, context);\n        const buffer = data_view.buffer.slice(byte_offset, byte_offset + size);\n        const data = decode_and_deliver({ encoded: buffer, context, decode, deliver });\n        return { data, size };\n    };\n    return { pack, parse }\n};\n\nexport const Padding = <C>(size: Numeric<C>): Struct<any, C> => {\n    const pack: Packer<any, C> = (source, options = {}) => {\n        size = numeric(size, options.context) as number;\n        return { size, buffer: options.data_view === undefined ? new ArrayBuffer(Math.ceil(size)) : options.data_view.buffer }\n    };\n    const parse: Parser<any, C> = (data_view, options = {}, deliver) => {\n        size = numeric(size, options.context) as number;\n        return { size, data: null };\n    };\n    return { pack, parse }\n};\n\n/* Allow Symbols once TypesScript adds support */\nexport type Chooser<C> = (context?: C) => number | string;\n\nexport interface Choices<D, C> {\n    [choice: number]: Struct<D, C>;\n    [choice: string]: Struct<D, C>;\n}\n\nexport interface Branch<D, C> {\n    chooser: Chooser<C>;\n    choices: Choices<D, C>;\n    default_choice?: Struct<D, C>;\n}\nexport const Branch = <D, C>({ chooser, choices, default_choice }: Branch<D, C>): Struct<D, C> => {\n    const choose = (source?: C): Struct<D, C> => {\n        let choice = chooser(source);\n        if ( choices.hasOwnProperty(choice) ) {\n            return choices[choice];\n        } else {\n            if ( default_choice !== undefined ) {\n                return default_choice;\n            } else {\n                throw new Error(`Choice ${choice} not in ${Object.keys(choices)}`);\n            }\n        }\n    };\n    const pack: Packer<D, C> = (source, options = {}) => {\n        return choose(options.context).pack(source, options);\n    };\n    const parse: Parser<D, C> = (data_view, options = {}, deliver) => {\n        return choose(options.context).parse(data_view, options, deliver);\n    };\n    return { parse, pack };\n};\n\nexport const Embed = <D, C extends Context_Iterable<D, S>, S>(embedded: Struct<Context_Iterable<D, S>, S> | Struct<D, C>): Struct<Context_Iterable<D, S> | D, C> => {\n    const pack = (source: Fetcher<D>, options: Pack_Options<C> = {}): Packed => {\n        if ( options.context !== undefined ) {\n            const { context } = options;\n            ( options as Pack_Options<S> ).context = context[Parent];\n            if ( embedded instanceof Array ) {\n                return ( embedded as Binary_Array<D, Context_Array<D, S>, S> ).pack(context as Context_Array<D, S>, options as Pack_Options<S>, source);\n            } else if ( embedded instanceof Map ) {\n                return ( embedded as Binary_Map<D, Context_Map<D, S>, S> ).pack(context as Context_Map<D, S>, options as Pack_Options<S>, context as Context_Map<D, S>);\n            }\n        }\n        return ( embedded as Struct<D, C> ).pack(source, options);\n    };\n    const parse = (data_view: DataView, options: Parse_Options<C> = {}, deliver?: Deliver<D>): Parsed<Context_Iterable<D, S> | D> => {\n        if ( options.context !== undefined ) {\n            const { context } = options;\n            ( options as Pack_Options<S> ).context = context[Parent];\n            if ( embedded instanceof Array ) {\n                return ( embedded as Binary_Array<D, Context_Array<D, S>, S> ).parse(data_view, options as Parse_Options<S>, undefined, context as Context_Array<D, S>);\n            } else if ( embedded instanceof Map ) {\n                return ( embedded as Binary_Map<D, Context_Map<D, S>, S> ).parse(data_view, options as Parse_Options<S>, undefined, context as Context_Map<D, S>);\n            }\n        }\n        return ( embedded as Struct<D, C> ).parse(data_view, options, deliver);\n    };\n    return { pack, parse }\n};\n\nexport type Map_Item<I> = Struct<I, Mapped<I>>;\nexport type Map_Iterable<I> = Array<[string, Map_Item<I>]>;\nexport type Map_Transcoders<I, D, C> = Transcoders<Mapped<I>, D, C>;\n\nexport interface Binary_Map<I, D, C> extends Mapped<Map_Item<I>>, Struct<D, C> {\n    pack: (source: D | Fetcher<D>, options?: Pack_Options<C>, encoded?: Context_Map<I, C>) => Packed;\n    parse: (data_view: DataView, options?: Parse_Options<C>, deliver?: Deliver<D>, results?: Context_Map<I, C>) => Parsed<D>;\n}\n\nexport const Binary_Map = <I, D, C>(transcoders: Map_Transcoders<I, D, C> | Map_Iterable<I> = {}, iterable?: Map_Iterable<I> | Map_Transcoders<I, D, C>): Binary_Map<I, D, C> => {\n    if ( transcoders instanceof Array ) {\n        [transcoders, iterable] = [iterable as Map_Transcoders<I, D, C>, transcoders as Map_Iterable<I>];\n    }\n    const { encode, decode, little_endian: LE } = transcoders;\n\n    const map = new Map(( iterable || [] ) as Map_Iterable<I>) as Binary_Map<I, D, C>;\n\n    map.pack = (source, options = {}, encoded) => {\n        const packed: Packed[] = [];\n        let { data_view, byte_offset = 0, little_endian = LE, context } = options;\n        if ( encoded === undefined ) {\n            encoded = fetch_and_encode({ source, encode, context });\n            set_context(encoded, context);\n        }\n        /* Need to return a function to the `pack` chain to enable Embed with value checking. */\n        const fetcher = (key: string) => () => {\n            const value = encoded!.get(key);\n            if ( value === undefined ) {\n                throw new Error(`Insufficient data for serialization: ${key} not in ${encoded}`)\n            }\n            return value;\n        };\n        let offset = 0;\n        for ( const [key, item] of map ) {\n            const { size, buffer } = item.pack(fetcher(key), { data_view, byte_offset: data_view === undefined ? 0 : byte_offset + offset, little_endian, context: encoded });\n            if ( data_view === undefined ) {\n                packed.push({ size, buffer });\n            }\n            offset += size;\n        }\n        if ( data_view === undefined ) {\n            data_view = concat_buffers(packed, offset);\n        }\n        return { size: offset, buffer: data_view.buffer };\n    };\n\n    map.parse = (data_view, options = {}, deliver, results) => {\n        const { byte_offset = 0, little_endian = LE, context } = options;\n        let remove_parent_symbol = false;\n        if ( results === undefined ) {\n            results = set_context(new Map() as Mapped<I>, context);\n            remove_parent_symbol = true;\n        }\n        let offset = 0;\n        for ( const [key, item] of map ) {\n            const { data, size } = item.parse(data_view, { byte_offset: byte_offset + offset, little_endian, context: results }, (data) => results!.set(key, data));\n            offset += size;\n        }\n        const data = decode_and_deliver<Mapped<I>, D, C>({ encoded: results, decode, context, deliver });\n        remove_context(results, remove_parent_symbol);\n        return { data, size: offset };\n    };\n\n    return map;\n};\n\nconst concat_buffers = (packed: Packed[], byte_length: number) => {\n    const data_view = new DataView(new ArrayBuffer(Math.ceil(byte_length)));\n    let byte_offset = 0;\n    for ( const { size, buffer } of packed ) {\n        /* Copy all the data from the returned buffers into one grand buffer. */\n        const bytes = Array.from(new Uint8Array(buffer as ArrayBuffer));\n        /* Create a Byte Array with the appropriate number of Uint(8)s, possibly with a trailing Bits. */\n        const array = Binary_Array();\n        for ( let i = 0; i < Math.floor(size); i++ ) {\n            array.push(Uint(8));\n        }\n        if ( size % 1 ) {\n            array.push(Bits(( size % 1 ) * 8));\n        }\n        /* Pack the bytes into the buffer */\n        array.pack(bytes, { data_view, byte_offset });\n        byte_offset += size;\n    }\n    return data_view;\n};\n\n/* This would be much cleaner if JavaScript had interfaces. Or I could make everything subclass Struct... */\nconst extract_array_options = <Items, Transcoders>(elements: Array<Items | Transcoders> = []) => {\n    if ( elements.length > 0 ) {\n        const first = elements[0];\n        if ( !first.hasOwnProperty('pack') && !first.hasOwnProperty('parse') ) {\n            return elements.shift() as Transcoders;\n        }\n        const last = elements[elements.length - 1];\n        if ( !last.hasOwnProperty('pack') && !last.hasOwnProperty('parse') ) {\n            return elements.pop() as Transcoders;\n        }\n    }\n    return {} as Transcoders;\n};\n\nexport type Array_Item<I> = Struct<I, Array<I>>;\nexport type Array_Transcoders<I, D, C> = Transcoders<Array<I>, D, C>;\n\nexport interface Binary_Array<I, D, C> extends Array<Array_Item<I>>, Struct<D, C> {\n    pack: (source: D | Fetcher<D>, options?: Pack_Options<C>, fetcher?: Fetcher<I>) => Packed;\n    __pack_loop: (fetcher: Fetcher<I>, options: Pack_Options<Array<I>>, store: (result: Packed) => void, parent?: C) => number;\n    parse: (data_view: DataView, options?: Parse_Options<C>, deliver?: Deliver<D>, results?: Context_Array<I, C>) => Parsed<D>;\n    __parse_loop: (data_view: DataView, options: Parse_Options<Context_Array<I, C>>, deliver: Deliver<I>, parent?: C) => number;\n}\n\nexport const Binary_Array = <I, D, C>(...elements: Array<Array_Transcoders<I, D, C> | Array_Item<I>>): Binary_Array<I, D, C> => {\n    const { encode, decode, little_endian: LE } = extract_array_options(elements) as Array_Transcoders<I, D, C>;\n\n    const array = new Array(...elements as Array<Array_Item<I>>) as Binary_Array<I, D, C>;\n\n    array.pack = (source, options = {}, fetcher) => {\n        let { data_view, byte_offset = 0, little_endian = LE, context } = options;\n        const encoded = fetch_and_encode({ source, encode, context });\n        const packed: Packed[] = [];\n        if ( fetcher === undefined ) {\n            set_context(encoded, context);\n            const iterator = encoded[Symbol.iterator]();\n            fetcher = () => {\n                const value = iterator.next().value;\n                if ( value === undefined ) {\n                    throw new Error(`Insufficient data for serialization: ${encoded}`)\n                }\n                return value;\n            }\n        }\n        const store = (result: Packed) => {\n            if ( data_view === undefined ) {\n                packed.push(result);\n            }\n        };\n        const size = array.__pack_loop(fetcher, { data_view, byte_offset, little_endian, context: encoded }, store, context);\n        if ( data_view === undefined ) {\n            data_view = concat_buffers(packed, size);\n        }\n        return { size, buffer: data_view.buffer };\n    };\n\n    array.__pack_loop = (fetcher, { data_view, byte_offset = 0, little_endian, context }, store) => {\n        let offset = 0;\n        for ( const item of array ) {\n            const { size, buffer } = item.pack(fetcher, { data_view, byte_offset: data_view === undefined ? 0 : byte_offset + offset, little_endian, context });\n            store({ size, buffer });\n            offset += size;\n        }\n        return offset;\n    };\n\n    array.parse = (data_view, options = {}, deliver, results) => {\n        const { byte_offset = 0, little_endian = LE, context } = options;\n        let remove_parent_symbol = false;\n        if ( results === undefined ) {\n            results = set_context(new Array() as Array<I>, context);\n            remove_parent_symbol = true;\n        }\n        const size = array.__parse_loop(data_view, { byte_offset, little_endian, context: results }, (data: I) => results!.push(data), context);\n        const data = decode_and_deliver({ encoded: remove_context(results, remove_parent_symbol), context, decode, deliver });\n        return { data, size };\n    };\n\n    array.__parse_loop = (data_view, { byte_offset = 0, little_endian, context }, deliver) => {\n        let offset = 0;\n        for ( const item of array ) {\n            const { data, size } = item.parse(data_view, { byte_offset: byte_offset + offset, little_endian, context }, deliver);\n            offset += size;\n        }\n        return offset;\n    };\n\n    return array;\n};\n\nexport interface Repeat_Options<I, D, C> extends Array_Transcoders<I, D, C> {\n    count?: Numeric<C>;\n    bytes?: Numeric<C>;\n}\n\nexport const Repeat = <I, D, C>(...elements: Array<Repeat_Options<I, D, C> | Array_Item<I>>): Binary_Array<I, D, C> => {\n    const { count, bytes, encode, decode, little_endian } = extract_array_options(elements) as Repeat_Options<I, D, C>;\n\n    const array = Binary_Array<I, D, C>({ encode, decode, little_endian }, ...elements as Array<Array_Item<I>>);\n\n    const pack_loop = array.__pack_loop;\n    const parse_loop = array.__parse_loop;\n\n    array.__pack_loop = (fetcher, { data_view, byte_offset = 0, little_endian, context }, store, parent) => {\n        let offset = 0;\n        if ( count !== undefined ) {\n            const repeat = numeric(count, parent);\n            for ( let i = 0; i < repeat; i++ ) {\n                offset += pack_loop(fetcher, { data_view, byte_offset: byte_offset + offset, little_endian, context }, store);\n            }\n        } else if ( bytes !== undefined ) {\n            const repeat = numeric(bytes, parent);\n            while ( offset < repeat ) {\n                offset += pack_loop(fetcher, { data_view, byte_offset: byte_offset + offset, little_endian, context }, store);\n            }\n            if ( offset > repeat ) {\n                throw new Error(`Cannot pack into ${repeat} bytes.`);\n            }\n        } else {\n            throw new Error(\"One of count or bytes must specified in options.\")\n        }\n        return offset;\n    };\n\n    array.__parse_loop = (data_view, { byte_offset = 0, little_endian, context }, deliver, parent) => {\n        let offset = 0;\n        if ( count !== undefined ) {\n            const repeat = numeric(count, parent);\n            for ( let i = 0; i < repeat; i++ ) {\n                offset += parse_loop(data_view, { byte_offset: byte_offset + offset, little_endian, context }, deliver);\n            }\n        } else if ( bytes !== undefined ) {\n            const repeat = numeric(bytes, parent);\n            while ( offset < repeat ) {\n                offset += parse_loop(data_view, { byte_offset: byte_offset + offset, little_endian, context }, deliver);\n            }\n            if ( offset > repeat ) {\n                throw new Error(`Cannot parse exactly ${repeat} bytes.`);\n            }\n        } else {\n            throw new Error(\"One of count or bytes must specified in options.\")\n        }\n        return offset;\n    };\n\n    return array;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/transcode.ts","export {hex, hex_buffer} from './serialization';\nexport {\n    Encoded,\n    Encoded_Map,\n    Encoded_Array,\n    Context_Array,\n    Context_Map,\n    Encoder,\n    Decoder,\n    inspect,\n    Parent,\n    Bits,\n    Uint,\n    Int,\n    Float,\n    Utf8,\n    Embed,\n    Binary_Array,\n    Binary_Map,\n    Byte_Buffer,\n    Repeat,\n    Branch,\n    Padding,\n    Primitive\n} from './transcode';\n\nimport {Uint, Int, Float, Padding, Struct, Primitive} from './transcode';\n\nexport const Uint8: Struct<number, any> = Uint(8);\nexport const Uint16: Struct<number, any> = Uint(16);\nexport const Uint16LE: Struct<number, any> = Uint(16, {little_endian: true});\nexport const Uint16BE = Uint16;\nexport const Uint32: Struct<number, any> = Uint(32);\nexport const Uint32LE: Struct<number, any> = Uint(32, {little_endian: true});\nexport const Uint32BE = Uint32;\nexport const Uint64: Struct<number, any> = Uint(64);\nexport const Uint64LE: Struct<number, any> = Uint(64, {little_endian: true});\nexport const Uint64BE = Uint64;\n\nexport const Int8: Struct<number, any> = Int(8);\nexport const Int16: Struct<number, any> = Int(8);\nexport const Int16LE: Struct<number, any> = Int(16, {little_endian: true});\nexport const Int16BE = Int16;\nexport const Int32: Struct<number, any> = Int(32);\nexport const Int32LE: Struct<number, any> = Int(32, {little_endian: true});\nexport const Int32BE = Int32;\n\nexport const Float32: Struct<number, any> = Float(32);\nexport const Float32LE: Struct<number, any> = Float(32, {little_endian: true});\nexport const Float32BE = Float32;\nexport const Float64: Struct<number, any> = Float(64);\nexport const Float64LE: Struct<number, any> = Float(64, {little_endian: true});\nexport const Float64BE = Float64;\n\n/** Noöp structure\n *\n * @type {Struct}\n */\nexport const Pass = Padding(0);\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.ts"],"sourceRoot":""}