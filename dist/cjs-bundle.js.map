{"version":3,"file":"cjs-bundle.js","sources":["serialization.js","transcode.js","index.js"],"sourcesContent":["export const hex = (value) => {\n    return \"0x\" + value.toString(16).toUpperCase().padStart(2, \"0\");\n};\nexport const hex_buffer = (buffer) => {\n    return Array.from(new Uint8Array(buffer), hex).join(\", \");\n};\nconst utf8_encoder = new TextEncoder();\nconst utf8_decoder = new TextDecoder();\nexport const Bits_Sizes = [1, 2, 3, 4, 5, 6, 7];\nexport const Uint_Sizes = Bits_Sizes.concat([8, 16, 32, 64]);\nexport const Int_Sizes = [8, 16, 32];\nexport const Float_Sizes = [32, 64];\nconst write_bit_shift = (packer, value, { bits, data_view, byte_offset = 0, little_endian }) => {\n    /*\n     bit_offset = 5\n     buffer = 00011111\n     byte = xxxxxxxx\n\n     new_buffer = 000xxxxx xxx11111\n     */\n    const bit_offset = (byte_offset % 1) * 8;\n    byte_offset = Math.floor(byte_offset);\n    const bytes = new Uint8Array(Math.ceil(bits / 8));\n    const bit_length = packer(value, { bits, byte_offset: 0, data_view: new DataView(bytes.buffer), little_endian });\n    let overlap = data_view.getUint8(byte_offset) & (0xFF >> (8 - bit_offset));\n    for (const [index, byte] of bytes.entries()) {\n        data_view.setUint8(byte_offset + index, ((byte << bit_offset) & 0xFF) | overlap);\n        overlap = byte >> (8 - bit_offset);\n    }\n    if (bit_offset + bits > 8) {\n        data_view.setUint8(byte_offset + Math.ceil(bits / 8), overlap);\n    }\n    return bit_length;\n};\nconst read_bit_shift = (parser, { bits, data_view, byte_offset = 0, little_endian }) => {\n    const bit_offset = (byte_offset % 1) * 8;\n    byte_offset = Math.floor(byte_offset);\n    const bytes = new Uint8Array(Math.ceil(bits / 8));\n    let byte = data_view.getUint8(byte_offset);\n    if (bit_offset + bits > 8) {\n        for (const index of bytes.keys()) {\n            const next = data_view.getUint8(byte_offset + index + 1);\n            bytes[index] = (byte >> bit_offset) | ((next << (8 - bit_offset)) & (0xFF >> (bits < 8 ? (8 - bits) : 0)));\n            byte = next;\n        }\n    }\n    else {\n        bytes[0] = byte >> bit_offset & (0xFF >> (8 - bits));\n    }\n    return parser({ bits, byte_offset: 0, data_view: new DataView(bytes.buffer), little_endian });\n};\nexport const uint_pack = (value, { bits, data_view, byte_offset = 0, little_endian }) => {\n    const original_value = value;\n    value = Math.floor(original_value);\n    if (value < 0 || value > 2 ** bits || original_value !== value || value > Number.MAX_SAFE_INTEGER) {\n        throw new Error(`Unable to encode ${original_value} to Uint${bits}`);\n    }\n    if (byte_offset % 1) {\n        return write_bit_shift(uint_pack, value, { bits, data_view, byte_offset, little_endian });\n    }\n    else {\n        switch (bits) {\n            case 1:\n            case 2:\n            case 3:\n            case 4:\n            case 5:\n            case 6:\n            case 7:\n            case 8:\n                data_view.setUint8(byte_offset, value);\n                break;\n            case 16:\n                data_view.setUint16(byte_offset, value, little_endian);\n                break;\n            case 32:\n                data_view.setUint32(byte_offset, value, little_endian);\n                break;\n            case 64:/* Special case to handle millisecond epoc time (from Date.now()) */ \n                const upper = Math.floor(value / 2 ** 32);\n                const lower = value % 2 ** 32;\n                let low_byte;\n                let high_byte;\n                if (little_endian) {\n                    low_byte = lower;\n                    high_byte = upper;\n                }\n                else {\n                    low_byte = upper;\n                    high_byte = lower;\n                }\n                data_view.setUint32(byte_offset, low_byte, little_endian);\n                data_view.setUint32(byte_offset + 4, high_byte, little_endian);\n                break;\n            default:\n                throw new Error(`Invalid size: ${bits}`);\n        }\n        return bits;\n    }\n};\nexport const uint_parse = ({ bits, data_view, byte_offset = 0, little_endian }) => {\n    if (byte_offset % 1) {\n        return read_bit_shift(uint_parse, { bits, data_view, byte_offset, little_endian });\n    }\n    else {\n        switch (bits) {\n            case 1:\n            case 2:\n            case 3:\n            case 4:\n            case 5:\n            case 6:\n            case 7:\n                return data_view.getUint8(byte_offset) & (0xFF >> (8 - bits));\n            case 8:\n                return data_view.getUint8(byte_offset);\n            case 16:\n                return data_view.getUint16(byte_offset, little_endian);\n            case 32:\n                return data_view.getUint32(byte_offset, little_endian);\n            case 64:/* Special case to handle millisecond epoc time (from Date.now()) */ \n                const low_byte = data_view.getUint32(byte_offset, little_endian);\n                const high_byte = data_view.getUint32(byte_offset + 4, little_endian);\n                let value;\n                if (little_endian) {\n                    value = high_byte * 2 ** 32 + low_byte;\n                }\n                else {\n                    value = low_byte * 2 ** 32 + high_byte;\n                }\n                if (value > Number.MAX_SAFE_INTEGER) {\n                    throw new Error(`Uint64 out of range for Javascript: ${hex_buffer(data_view.buffer.slice(byte_offset, byte_offset + 8))}`);\n                }\n                return value;\n            default:\n                throw new Error(`Invalid size: ${bits}`);\n        }\n    }\n};\nexport const int_pack = (value, { bits, data_view, byte_offset = 0, little_endian }) => {\n    const original_value = value;\n    value = Math.floor(original_value);\n    if (value < -(2 ** (bits - 1)) || value > 2 ** (bits - 1) - 1 || original_value !== value) {\n        throw new Error(`Unable to encode ${original_value} to Int${bits}`);\n    }\n    if (byte_offset % 1) {\n        return write_bit_shift(int_pack, value, { bits, data_view, byte_offset, little_endian });\n    }\n    else {\n        switch (bits) {\n            case 8:\n                data_view.setUint8(byte_offset, value);\n                break;\n            case 16:\n                data_view.setUint16(byte_offset, value, little_endian);\n                break;\n            case 32:\n                data_view.setUint32(byte_offset, value, little_endian);\n                break;\n            default:\n                throw new Error(`Invalid size: ${bits}`);\n        }\n        return bits;\n    }\n};\nexport const int_parse = ({ bits, data_view, byte_offset = 0, little_endian }) => {\n    if (byte_offset % 1) {\n        return read_bit_shift(int_parse, { bits, data_view, byte_offset, little_endian });\n    }\n    else {\n        switch (bits) {\n            case 8:\n                return data_view.getInt8(byte_offset);\n            case 16:\n                return data_view.getInt16(byte_offset, little_endian);\n            case 32:\n                return data_view.getInt32(byte_offset, little_endian);\n            default:\n                throw new Error(`Invalid size: ${bits}`);\n        }\n    }\n};\nexport const float_pack = (value, { bits, data_view, byte_offset = 0, little_endian }) => {\n    /* TODO: Input validation */\n    if (byte_offset % 1) {\n        return write_bit_shift(float_pack, value, { bits, data_view, byte_offset, little_endian });\n    }\n    else {\n        switch (bits) {\n            case 32:\n                data_view.setFloat32(byte_offset, value, little_endian);\n                break;\n            case 64:\n                data_view.setFloat64(byte_offset, value, little_endian);\n                break;\n            default:\n                throw new Error(`Invalid size: ${bits}`);\n        }\n        return bits;\n    }\n};\nexport const float_parse = ({ bits, data_view, byte_offset = 0, little_endian }) => {\n    if (byte_offset % 1) {\n        return read_bit_shift(float_parse, { bits, data_view, byte_offset, little_endian });\n    }\n    else {\n        switch (bits) {\n            case 32:\n                return data_view.getFloat32(byte_offset, little_endian);\n            case 64:\n                return data_view.getFloat64(byte_offset, little_endian);\n            default:\n                throw new Error(`Invalid size: ${bits}`);\n        }\n    }\n};\nexport const utf8_pack = (value, { bits, data_view, byte_offset = 0 }) => {\n    if (byte_offset % 1) {\n        return write_bit_shift(utf8_pack, value, { bits, data_view, byte_offset });\n    }\n    else {\n        const byte_array = utf8_encoder.encode(value);\n        const byte_length = byte_array.byteLength;\n        if (bits > 0 && byte_length > bits / 8) {\n            throw new Error(`Input string serializes to longer than ${bits / 8} bytes:\\n${value}`);\n        }\n        if (byte_length + byte_offset > data_view.byteLength) {\n            throw new Error(`Insufficient space in ArrayBuffer to store length ${byte_length} string:\\n${value}`);\n        }\n        for (const [index, byte] of byte_array.entries()) {\n            data_view.setUint8(byte_offset + index, byte);\n        }\n        return byte_length * 8;\n    }\n};\nexport const utf8_parse = ({ bits, data_view, byte_offset = 0 }) => {\n    if (byte_offset % 1) {\n        return read_bit_shift(utf8_parse, { bits, data_view, byte_offset });\n    }\n    else {\n        return utf8_decoder.decode(new DataView(data_view.buffer, byte_offset, bits ? bits / 8 : undefined));\n    }\n};\n//# sourceMappingURL=serialization.js.map","import 'improved-map';\nimport { Bits_Sizes, Uint_Sizes, Int_Sizes, Float_Sizes, uint_pack, int_pack, float_pack, uint_parse, int_parse, float_parse, utf8_pack, utf8_parse } from './serialization';\nexport const Parent = '$parent';\nconst set_context = (data, context) => {\n    if (context !== undefined) {\n        data[Parent] = context;\n    }\n    return data;\n};\nconst remove_context = (data, delete_flag) => {\n    if (delete_flag) {\n        delete data[Parent];\n    }\n    return data;\n};\nexport const inspect_transcoder = (data, context) => {\n    console.log({ data, context });\n    return data;\n};\nexport const inspect = {\n    encode: inspect_transcoder,\n    decode: inspect_transcoder,\n};\nconst fetch_and_encode = ({ source, encode, context }) => {\n    let decoded;\n    if (typeof source === 'function') {\n        decoded = source();\n    }\n    else {\n        decoded = source;\n    }\n    if (typeof encode === 'function') {\n        return encode(decoded, context);\n    }\n    else {\n        return decoded;\n    }\n};\nconst decode_and_deliver = ({ encoded, decode, context, deliver }) => {\n    let decoded;\n    if (typeof decode === 'function') {\n        decoded = decode(encoded, context);\n    }\n    else {\n        decoded = encoded;\n    }\n    if (typeof deliver === 'function') {\n        deliver(decoded);\n    }\n    return decoded;\n};\nconst factory = (serializer, deserializer, verify_size) => {\n    return ((bits, transcoders = {}) => {\n        if (!verify_size(bits)) {\n            throw new Error(`Invalid size: ${bits}`);\n        }\n        const { encode, decode, little_endian: LE } = transcoders;\n        const pack = (source, options = {}) => {\n            const { data_view = new DataView(new ArrayBuffer(Math.ceil(bits / 8))), byte_offset = 0, little_endian = LE, context } = options;\n            const encoded = fetch_and_encode({ source, encode, context });\n            const size = (serializer(encoded, { bits, data_view, byte_offset, little_endian }) / 8);\n            return { size, buffer: data_view.buffer };\n        };\n        const parse = (data_view, options = {}, deliver) => {\n            const { byte_offset = 0, little_endian = LE, context } = options;\n            const encoded = deserializer({ bits, data_view, byte_offset, little_endian });\n            const data = decode_and_deliver({ encoded, context, decode, deliver });\n            return { data, size: bits / 8 };\n        };\n        return { pack, parse };\n    });\n};\nexport const Bits = factory(uint_pack, uint_parse, (s) => Bits_Sizes.includes(s));\nexport const Uint = factory(uint_pack, uint_parse, (s) => Uint_Sizes.includes(s));\nexport const Int = factory(int_pack, int_parse, (s) => Int_Sizes.includes(s));\nexport const Float = factory(float_pack, float_parse, (s) => Float_Sizes.includes(s));\nexport const Utf8 = factory(utf8_pack, utf8_parse, (s) => s % 8 === 0 && s >= 0);\nconst numeric = (n, context, type = 'B') => {\n    if (typeof n === 'object') {\n        let { bits = 0, bytes = 0 } = n;\n        n = type === 'B' ? bits / 8 + bytes : bits + bytes * 8;\n    }\n    else if (typeof n === 'function') {\n        n = n(context);\n    }\n    else if (typeof n !== 'number') {\n        throw new Error(`Invalid numeric input ${n}`);\n    }\n    if (n < 0) {\n        throw new Error(`Invalid size: ${n} bytes`);\n    }\n    return n;\n};\n/** Byte_Buffer doesn't do any serialization, but just copies bytes to/from an ArrayBuffer that's a subset of the\n * serialized buffer. Byte_Buffer only works on byte-aligned data.\n *\n * @param {Numeric} length\n * @param {Transcoders<ArrayBuffer, any>} transcoders\n */\nexport const Byte_Buffer = (length, transcoders = {}) => {\n    const { encode, decode } = transcoders;\n    const pack = (source, options = {}) => {\n        const { data_view, byte_offset = 0, context } = options;\n        const size = numeric(length, context);\n        const buffer = fetch_and_encode({ source, encode, context });\n        if (size !== buffer.byteLength) {\n            throw new Error(`Length miss-match. Expected length: ${size}, actual bytelength: ${buffer.byteLength}`);\n        }\n        if (data_view === undefined) {\n            return { size, buffer };\n        }\n        new Uint8Array(buffer).forEach((value, index) => {\n            data_view.setUint8(byte_offset + index, value);\n        });\n        return { size, buffer: data_view.buffer };\n    };\n    const parse = (data_view, options = {}, deliver) => {\n        const { byte_offset = 0, context } = options;\n        const size = numeric(length, context);\n        const buffer = data_view.buffer.slice(byte_offset, byte_offset + size);\n        const data = decode_and_deliver({ encoded: buffer, context, decode, deliver });\n        return { data, size };\n    };\n    return { pack, parse };\n};\nexport const Padding = (bits, transcoders = {}) => {\n    const { encode, decode } = transcoders;\n    const pack = (source, options = {}) => {\n        let { data_view, byte_offset = 0, context } = options;\n        const size = numeric(bits, context, 'b');\n        if (data_view === undefined) {\n            data_view = new DataView(new ArrayBuffer(Math.ceil(size / 8)));\n        }\n        if (encode !== undefined) {\n            let fill = encode(null, options.context);\n            let i = 0;\n            while (i < Math.floor(size / 8)) {\n                data_view.setUint8(byte_offset + i, fill);\n                fill >>= 8;\n                i++;\n            }\n            const remainder = size % 8;\n            if (remainder) {\n                data_view.setUint8(byte_offset + i, fill & (2 ** remainder - 1));\n            }\n        }\n        return { size: size / 8, buffer: data_view.buffer };\n    };\n    const parse = (data_view, options = {}, deliver) => {\n        const { context } = options;\n        const size = numeric(bits, context, 'b');\n        let data = null;\n        if (decode !== undefined) {\n            data = decode(data, context);\n            if (deliver !== undefined) {\n                deliver(data);\n            }\n        }\n        return { size: size / 8, data };\n    };\n    return { pack, parse };\n};\nexport const Branch = ({ chooser, choices, default_choice }) => {\n    const choose = (source) => {\n        let choice = chooser(source);\n        if (choices.hasOwnProperty(choice)) {\n            return choices[choice];\n        }\n        else {\n            if (default_choice !== undefined) {\n                return default_choice;\n            }\n            else {\n                throw new Error(`Choice ${choice} not in ${Object.keys(choices)}`);\n            }\n        }\n    };\n    const pack = (source, options = {}) => {\n        return choose(options.context).pack(source, options);\n    };\n    const parse = (data_view, options = {}, deliver) => {\n        return choose(options.context).parse(data_view, options, deliver);\n    };\n    return { parse, pack };\n};\nexport const Embed = (embedded) => {\n    const pack = (source, { byte_offset, data_view, little_endian, context } = {}) => {\n        if (context !== undefined) {\n            const parent = context[Parent];\n            if (embedded instanceof Array) {\n                return embedded\n                    .pack(context, { byte_offset, data_view, little_endian, context: parent }, source);\n            }\n            else if (embedded instanceof Map) {\n                return embedded\n                    .pack(context, { byte_offset, data_view, little_endian, context: parent }, context);\n            }\n        }\n        return embedded.pack(source, { byte_offset, data_view, little_endian, context });\n    };\n    const parse = (data_view, { byte_offset, little_endian, context } = {}, deliver) => {\n        if (context !== undefined) {\n            const parent = context[Parent];\n            if (embedded instanceof Array) {\n                return embedded\n                    .parse(data_view, { byte_offset, little_endian, context: parent }, undefined, context);\n            }\n            else if (embedded instanceof Map) {\n                return embedded\n                    .parse(data_view, { byte_offset, little_endian, context: parent }, undefined, context);\n            }\n        }\n        return embedded.parse(data_view, { byte_offset, little_endian, context }, deliver);\n    };\n    return { pack, parse };\n};\nconst concat_buffers = (packed, byte_length) => {\n    const data_view = new DataView(new ArrayBuffer(Math.ceil(byte_length)));\n    let byte_offset = 0;\n    for (const { size, buffer } of packed) {\n        /* Copy all the data from the returned buffers into one grand buffer. */\n        const bytes = Array.from(new Uint8Array(buffer));\n        /* Create a Byte Array with the appropriate number of Uint(8)s, possibly with a trailing Bits. */\n        const array = Binary_Array();\n        for (let i = 0; i < Math.floor(size); i++) {\n            array.push(Uint(8));\n        }\n        if (size % 1) {\n            array.push(Bits((size % 1) * 8));\n        }\n        /* Pack the bytes into the buffer */\n        array.pack(bytes, { data_view, byte_offset });\n        byte_offset += size;\n    }\n    return data_view;\n};\nexport function Binary_Map(transcoders = {}, iterable) {\n    if (transcoders instanceof Array) {\n        [transcoders, iterable] = [iterable, transcoders];\n    }\n    const { encode, decode, little_endian: LE } = transcoders;\n    const map = new Map((iterable || []));\n    map.pack = (source, options = {}, encoded) => {\n        const packed = [];\n        let { data_view, byte_offset = 0, little_endian = LE, context } = options;\n        if (encoded === undefined) {\n            encoded = fetch_and_encode({ source, encode, context });\n            set_context(encoded, context);\n        }\n        /* Need to return a function to the `pack` chain to enable Embed with value checking. */\n        const fetcher = (key) => () => {\n            const value = encoded.get(key);\n            if (value === undefined) {\n                throw new Error(`Insufficient data for serialization: ${key} not in ${encoded}`);\n            }\n            return value;\n        };\n        let offset = 0;\n        for (const [key, item] of map) {\n            const { size, buffer } = item.pack(fetcher(key), { data_view, byte_offset: data_view === undefined ? 0 : byte_offset + offset, little_endian, context: encoded });\n            if (data_view === undefined) {\n                packed.push({ size, buffer });\n            }\n            offset += size;\n        }\n        if (data_view === undefined) {\n            data_view = concat_buffers(packed, offset);\n        }\n        return { size: offset, buffer: data_view.buffer };\n    };\n    map.parse = (data_view, options = {}, deliver, results) => {\n        const { byte_offset = 0, little_endian = LE, context } = options;\n        let remove_parent_symbol = false;\n        if (results === undefined) {\n            results = set_context(new Map(), context);\n            remove_parent_symbol = true;\n        }\n        let offset = 0;\n        for (const [key, item] of map) {\n            const { data, size } = item.parse(data_view, { byte_offset: byte_offset + offset, little_endian, context: results }, (data) => results.set(key, data));\n            offset += size;\n        }\n        const data = decode_and_deliver({ encoded: results, decode, context, deliver });\n        remove_context(results, remove_parent_symbol);\n        return { data, size: offset };\n    };\n    return map;\n}\n(function (Binary_Map) {\n    Binary_Map.object_encoder = (obj) => Map.fromObject(obj);\n    Binary_Map.object_decoder = (map) => map.toObject();\n    Binary_Map.object_transcoders = { encode: Binary_Map.object_encoder, decode: Binary_Map.object_decoder };\n})(Binary_Map || (Binary_Map = {}));\n/* This would be much cleaner if JavaScript had interfaces. Or I could make everything subclass Struct... */\nconst extract_array_options = (elements = []) => {\n    if (elements.length > 0) {\n        const first = elements[0];\n        if (!first.hasOwnProperty('pack') && !first.hasOwnProperty('parse')) {\n            return elements.shift();\n        }\n        const last = elements[elements.length - 1];\n        if (!last.hasOwnProperty('pack') && !last.hasOwnProperty('parse')) {\n            return elements.pop();\n        }\n    }\n    return {};\n};\nexport const Binary_Array = (...elements) => {\n    const { encode, decode, little_endian: LE } = extract_array_options(elements);\n    const array = new Array(...elements);\n    array.pack = (source, options = {}, fetcher) => {\n        let { data_view, byte_offset = 0, little_endian = LE, context } = options;\n        const encoded = fetch_and_encode({ source, encode, context });\n        const packed = [];\n        if (fetcher === undefined) {\n            set_context(encoded, context);\n            const iterator = encoded[Symbol.iterator]();\n            fetcher = () => {\n                const value = iterator.next().value;\n                if (value === undefined) {\n                    throw new Error(`Insufficient data for serialization: ${encoded}`);\n                }\n                return value;\n            };\n        }\n        const store = (result) => {\n            if (data_view === undefined) {\n                packed.push(result);\n            }\n        };\n        const size = array.__pack_loop(fetcher, { data_view, byte_offset, little_endian, context: encoded }, store, context);\n        if (data_view === undefined) {\n            data_view = concat_buffers(packed, size);\n        }\n        return { size, buffer: data_view.buffer };\n    };\n    array.__pack_loop = (fetcher, { data_view, byte_offset = 0, little_endian, context }, store) => {\n        let offset = 0;\n        for (const item of array) {\n            const { size, buffer } = item.pack(fetcher, { data_view, byte_offset: data_view === undefined ? 0 : byte_offset + offset, little_endian, context });\n            store({ size, buffer });\n            offset += size;\n        }\n        return offset;\n    };\n    array.parse = (data_view, options = {}, deliver, results) => {\n        const { byte_offset = 0, little_endian = LE, context } = options;\n        let remove_parent_symbol = false;\n        if (results === undefined) {\n            results = set_context(new Array(), context);\n            remove_parent_symbol = true;\n        }\n        const size = array.__parse_loop(data_view, { byte_offset, little_endian, context: results }, (data) => results.push(data), context);\n        const data = decode_and_deliver({ encoded: remove_context(results, remove_parent_symbol), context, decode, deliver });\n        return { data, size };\n    };\n    array.__parse_loop = (data_view, { byte_offset = 0, little_endian, context }, deliver) => {\n        let offset = 0;\n        for (const item of array) {\n            const { data, size } = item.parse(data_view, { byte_offset: byte_offset + offset, little_endian, context }, deliver);\n            offset += size;\n        }\n        return offset;\n    };\n    return array;\n};\nexport const Repeat = (...elements) => {\n    const { count, bytes, encode, decode, little_endian } = extract_array_options(elements);\n    const array = Binary_Array({ encode, decode, little_endian }, ...elements);\n    const pack_loop = array.__pack_loop;\n    const parse_loop = array.__parse_loop;\n    array.__pack_loop = (fetcher, { data_view, byte_offset = 0, little_endian, context }, store, parent) => {\n        let offset = 0;\n        if (count !== undefined) {\n            const repeat = numeric(count, parent);\n            for (let i = 0; i < repeat; i++) {\n                offset += pack_loop(fetcher, { data_view, byte_offset: byte_offset + offset, little_endian, context }, store);\n            }\n        }\n        else if (bytes !== undefined) {\n            const repeat = numeric(bytes, parent);\n            while (offset < repeat) {\n                offset += pack_loop(fetcher, { data_view, byte_offset: byte_offset + offset, little_endian, context }, store);\n            }\n            if (offset > repeat) {\n                throw new Error(`Cannot pack into ${repeat} bytes.`);\n            }\n        }\n        else {\n            throw new Error(\"One of count or bytes must specified in options.\");\n        }\n        return offset;\n    };\n    array.__parse_loop = (data_view, { byte_offset = 0, little_endian, context }, deliver, parent) => {\n        let offset = 0;\n        if (count !== undefined) {\n            const repeat = numeric(count, parent);\n            for (let i = 0; i < repeat; i++) {\n                offset += parse_loop(data_view, { byte_offset: byte_offset + offset, little_endian, context }, deliver);\n            }\n        }\n        else if (bytes !== undefined) {\n            const repeat = numeric(bytes, parent);\n            while (offset < repeat) {\n                offset += parse_loop(data_view, { byte_offset: byte_offset + offset, little_endian, context }, deliver);\n            }\n            if (offset > repeat) {\n                throw new Error(`Cannot parse exactly ${repeat} bytes.`);\n            }\n        }\n        else {\n            throw new Error(\"One of count or bytes must specified in options.\");\n        }\n        return offset;\n    };\n    return array;\n};\n//# sourceMappingURL=transcode.js.map","export { hex, hex_buffer } from './serialization';\nexport { inspect, Parent, Bits, Uint, Int, Float, Utf8, Embed, Binary_Array, Binary_Map, Byte_Buffer, Repeat, Branch, Padding } from './transcode';\nimport { Uint, Int, Float, Padding } from './transcode';\nexport const Uint8 = Uint(8);\nexport const Uint16 = Uint(16);\nexport const Uint16LE = Uint(16, { little_endian: true });\nexport const Uint16BE = Uint16;\nexport const Uint32 = Uint(32);\nexport const Uint32LE = Uint(32, { little_endian: true });\nexport const Uint32BE = Uint32;\nexport const Uint64 = Uint(64);\nexport const Uint64LE = Uint(64, { little_endian: true });\nexport const Uint64BE = Uint64;\nexport const Int8 = Int(8);\nexport const Int16 = Int(8);\nexport const Int16LE = Int(16, { little_endian: true });\nexport const Int16BE = Int16;\nexport const Int32 = Int(32);\nexport const Int32LE = Int(32, { little_endian: true });\nexport const Int32BE = Int32;\nexport const Float32 = Float(32);\nexport const Float32LE = Float(32, { little_endian: true });\nexport const Float32BE = Float32;\nexport const Float64 = Float(64);\nexport const Float64LE = Float(64, { little_endian: true });\nexport const Float64BE = Float64;\n/** Noöp structure\n *\n * @type {Struct}\n */\nexport const Pass = Padding(0);\n//# sourceMappingURL=index.js.map"],"names":[],"mappings":"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"}